Class {
	#name : #BioClassifierTest,
	#superclass : #BioAbstractTest,
	#instVars : [
		'classifier',
		'group'
	],
	#category : 'BioClassifierTests-Core'
}

{ #category : #accessing }
BioClassifierTest >> observations01 [

	^ '>gi|198282148|ref|NC_011206.1| Acidithiobacillus ferrooxidans ATCC 53993 chromosome, complete genome
>gi|295691862|ref|NC_014106.1| Lactobacillus crispatus ST1, complete genome
>gi|224372070|ref|NC_012115.1| Nautilia profundicola AmH chromosome, complete genome
>gi|296051576|ref|NC_014149.1| Planctomyces limnophilus DSM 3776 plasmid pPLIM01, complete sequence
>gi|296120274|ref|NC_014148.1| Planctomyces limnophilus DSM 3776 chromosome, complete genome
>gi|91791058|ref|NC_007950.1| Polaromonas sp. JS666 plasmid 2, complete sequence
>gi|91790731|ref|NC_007949.1| Polaromonas sp. JS666 plasmid 1, complete sequence
>gi|91785913|ref|NC_007948.1| Polaromonas sp. JS666, complete genome
>gi|121602919|ref|NC_008781.1| Polaromonas naphthalenivorans CJ2, complete genome
>gi|121583582|ref|NC_008764.1| Polaromonas naphthalenivorans CJ2 plasmid pPNAP08, complete sequence
>gi|121583564|ref|NC_008763.1| Polaromonas naphthalenivorans CJ2 plasmid pPNAP07, complete sequence
>gi|121583543|ref|NC_008762.1| Polaromonas naphthalenivorans CJ2 plasmid pPNAP06, complete sequence
>gi|121583484|ref|NC_008761.1| Polaromonas naphthalenivorans CJ2 plasmid pPNAP05, complete sequence
>gi|121583343|ref|NC_008760.1| Polaromonas naphthalenivorans CJ2 plasmid pPNAP04, complete sequence
'
]

{ #category : #accessing }
BioClassifierTest >> observations02 [

	^ { 'Japan:Shimane,Izumo,Koshi 3775' .
'Japan:Shimane,Izumo,Koshi 3775' .
'Japan:Shimane,Izumo,Koshi 3775' .
'Japan:Shimane,Oda,Kawai,Yoshinaga 60' .
'Japan:Shimane,Oda,Kawai,Yoshinaga 60' .
'Philippines:Cagbang,Oton,Iloilo' .
'Philippines:Ilocos Norte,Barangay,Pardan,Sarrat' .
'Philippines:Ilocos Norte,Barangay,Pariir,Sarrat' .
'Philippines:Ilocos Norte,Piddig' .
'Philippines:Ilocos Norte,Batac' .
'Japan:Shimane,Oda,Kawai,Yoshinaga 60' .
'Japan:Hokkaido,Otofuke,Namiki 8' .
'Japan:Hokkaido' .
'Japan:Shimane,Izumo,Koshi 3775' .
'China: Hubei Province' .
'China: Shanxi Province' .
'China: Sichuan Province' .
'China: Sichuan Province' .
'China: Gansu Province' .
'United Kingdom: Dudley Castle' .
'United Kingdom: Dudley Castle' .
'Japan:Shimane,Oda,Kawai,Yoshinaga 60' .
'Japan:Shimane,Kisuki' .
'Japan:Shimane,Kisuki' .
'Japan:Okayama,Asahimatchi-kita2272' .
'Japan:Hokkaido' }
]

{ #category : #accessing }
BioClassifierTest >> observations03 [

	^ { 'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA' .

'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA' .

'CCCCATGCATATAAGCAAGTACATGACTTCTAT-GACAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATCCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAACTTTACCA' .

'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATGTTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGTCCC-TAAACCGTGGGGGTCGCTATCCAATGAATTTTACCA' .

'CCCCATGCATATAAGCAAGTACATGACTTCTAT-GACAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATCCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAACTTTACCA' .

'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATAACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA' . 

'CCCCATGCATATAAGCAAGTACATGACTTCTAT-GACAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATCCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACCAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAACTTTACCA' .

'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA' }
]

{ #category : #accessing }
BioClassifierTest >> subjects01 [
	" Answer a Collection of BioAccession objects "

	^ self observations01 lines collect: [: accString | BioParser tokenizeFastaDescription: accString ]
]

{ #category : #accessing }
BioClassifierTest >> subjects02 [
	" Answer a <Collection> of String objects "
	
	^ self observations02
]

{ #category : #accessing }
BioClassifierTest >> subjects03 [
	" Answer a <Collection> of BioSequence objects "
	
	^ self observations03 collect: [: str | str asSequence ]
]

{ #category : #testing }
BioClassifierTest >> testAtMatches [

	| cf |
	
	cf := BioClassifier new.
	self assert: (cf atMatches isKindOf: Collection).
	self assert: cf atMatches isEmpty.
	cf atMatchesPut: 1.
	self deny: cf atMatches isEmpty.	
	self assert: (cf atMatches isKindOf: Collection).
	cf atMatchesPut: 2.
	self assert: cf atMatches size equals: 2
]

{ #category : #testing }
BioClassifierTest >> testAtMatchesPut [

	| cf |
	
	cf := BioClassifier new.
	cf atMatchesPut: 1.
	self assert: (cf atMatches bioHasEqualElements: #(1)).
	cf atMatchesPut: 2.
	self assert: (cf atMatches bioHasEqualElements: #(1 2)).
]

{ #category : #testing }
BioClassifierTest >> testAtMismatchesPut [

	| cf |
	
	cf := BioClassifier new.
	cf atMismatchesPut: 1.
	self assert: (cf mismatches bioHasEqualElements: #(1)).
	cf atMismatchesPut: 2.
	self assert: (cf mismatches bioHasEqualElements: #(1 2)).
]

{ #category : #testing }
BioClassifierTest >> testClassesSize [

	| cluster |
	classifier := BioClassifier new.
	self should: [ classifier classesSize ] raise: MessageNotUnderstood description: 'No organization assigned yet'.
	cluster := BioGroupOrganization forSimilarityOn: #value.
	classifier organization: cluster.	
	self assert: classifier classesSize = 0.
	self trainedSet01 do: [ : feature | cluster addOrganization: (BioOrganization new feature: feature) ].
	self assert: classifier classesSize = 6.	
	self subjects01 do: [ : subject | classifier classify: subject ].
	self assert: classifier classesSize = 6.
]

{ #category : #testing }
BioClassifierTest >> testClassifyByEquality01 [
	" Test classifying plain Strings "

	|  clusters |
	
	clusters := BioGroupOrganization forEqualityOn: #value.
	self trainedSet02 do: [ : feature | clusters addOrganization: (BioOrganization new feature: feature) ].
	classifier := BioClassifier new organization: clusters.
	self subjects02 do: [: subject | classifier classify: subject ].

	self assert: (classifier organization isKindOf: BioGroupOrganization).
	self assert: classifier classesSize = 5.
	self assert: classifier maxClasses = 2.

	
]

{ #category : #testing }
BioClassifierTest >> testClassifyByEquality02 [
	" Test classifying on User objects "

	| cluster |
	
	cluster := BioGroupOrganization forEqualityOn: #asString.
	self trainedSet03 do: [ : feature | cluster addOrganization: (BioOrganization new feature: feature) ].
	classifier := BioClassifier new organization: cluster.
	self subjects03 do: [ : subject | classifier classify: subject ].
	self assert: (classifier organization isKindOf: BioGroupOrganization).
	self assert: classifier classesSize = 3.
	self assert: classifier maxClasses = 3.
	self assert: classifier maxClass feature = 'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA'.
	self assert: classifier minClass feature = 'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATGTTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGTCCC-TAAACCGTGGGGGTCGCTATCCAATGAATTTTACCA'.
	
]

{ #category : #testing }
BioClassifierTest >> testClassifyBySimilarity01 [
	" Test classifying plain Strings "

	| cluster |
	
	cluster := BioGroupOrganization forSimilarityOn: #value.
	self trainedSet01 do: [ : feature | cluster addOrganization: (BioOrganization new feature: feature) ].
	classifier := BioClassifier new organization: cluster.
	self subjects01 do: [ : subject | classifier classify: subject ].
	self assert: (classifier organization isKindOf: BioGroupOrganization).
	self assert: classifier classesSize = 6.
	self assert: classifier maxClasses = 6.
	self assert: (classifier maxClass feature = 'Polaromonas naphthalenivorans CJ2').
	self assert: classifier minClasses = 1.
	self assert: (classifier minClass feature = 'Nautilia').
	
]

{ #category : #testing }
BioClassifierTest >> testElements [

	group := BioGroupOrganization withAll: self trainedSet01.
	self assert: (group contents noneSatisfy: [ : g | g name isEmpty ]).

]

{ #category : #testing }
BioClassifierTest >> testGroupBy01 [

	| clusters |
	clusters := BioGroupOrganization forEqualityOn: #value.
	self trainedSet02 do: [ : feature | clusters addOrganization: (BioOrganization new feature: feature) ].
	classifier := BioClassifier new organization: clusters.
	self subjects02 do: [ : subject | classifier classify: subject ].
	self assert: (classifier groupBy: #value) size equals: 5.
	self assert: (classifier atMatches includesAllOf: self trainedSet02Collection)
]

{ #category : #testing }
BioClassifierTest >> testGroupCreation [

	group := BioGroupOrganization withAll: self trainedSet01.
	self assert: ( group isKindOf: BioGroupOrganization ).
	self assert: ( group contents isKindOf: Collection ).
	self deny: ( group contents isEmpty ).
	self assert: group contents size = 6.
	self assert: ( group contents allSatisfy: [: g | g isKindOf: BioOrganization ] ).

]

{ #category : #testing }
BioClassifierTest >> testMatches [

	| cf |
	
	cf := BioClassifier new.
	self assert: (cf matches isKindOf: Collection).
	self assert: cf matches isEmpty.
	cf atMatchesPut: 1.
	self deny: cf matches isEmpty.	
	self assert: (cf matches isKindOf: Collection).
	cf atMatchesPut: 2.
	self assert: cf matches size equals: 1
]

{ #category : #testing }
BioClassifierTest >> testMismatches [

	| cf |
	
	cf := BioClassifier new.
	self assert: (cf mismatches isKindOf: Collection).
	self assert: cf mismatches isEmpty.
	cf atMismatchesPut: 1.
	self deny: cf mismatches isEmpty.	
	self assert: (cf mismatches isKindOf: Collection).
	self assert: (cf mismatches bioHasEqualElements: #(1)).
	cf atMismatchesPut: 2.
	self assert: (cf mismatches bioHasEqualElements: #(1 2)).
]

{ #category : #testing }
BioClassifierTest >> testNewMatchingDictionary [

	self assert: ((BioClassifier new newMatchingDictionary: #mismatches) isKindOf: Dictionary)
]

{ #category : #testing }
BioClassifierTest >> testSetFeatures [

	| subjects grouping |
	
	grouping := BioGroupOrganization forSimilarityOn: #value.
	self trainedSet01 do: [ : feature |
		grouping addOrganization: ( BioOrganization new feature: feature ) ].

	self assert: ( grouping features isKindOf: Collection ).
	self assert: grouping features size = 6.
	self assert: ( grouping features bioHasEqualElements: self trainedSet01 )
]

{ #category : #accessing }
BioClassifierTest >> trainedSet01 [

	^ { 'Polaromonas naphthalenivorans CJ2' .
		'Polaromonas sp. JS666' .
		'Planctomyces limnophilus DSM 3776' .
		'Nautilia' .
		'Lactobacillus crispatus ST1' .
		'Acidithiobacillus ferrooxidans' }
]

{ #category : #accessing }
BioClassifierTest >> trainedSet02 [

	^ { 'United Kingdom: Dudley Castle' .
		'Japan:Shimane,Kisuki' .
		'Philippines:Ilocos Norte,Barangay,Pardan,Sarrat' .
		'Japan:Hokkaido,Otofuke,Namiki 8' .
		'China: Sichuan Province' }
]

{ #category : #accessing }
BioClassifierTest >> trainedSet02Collection [

	^ OrderedCollection new 
				add: 'United Kingdom: Dudley Castle'; 
				add: 'Philippines:Ilocos Norte,Barangay,Pardan,Sarrat';
				add: 'Japan:Hokkaido,Otofuke,Namiki 8';
				add: 'China: Sichuan Province'; 
				yourself
]

{ #category : #accessing }
BioClassifierTest >> trainedSet03 [

	^ { 'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAAGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAATTTTA' .
'CCCCATGCATATAAGCAAGTACATGACTTCTAT-GACAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATCCTTGATAGTATATCTATTATATATTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGCCCATAAACCGTGGGGGTCGCTATCCAATGAACTTTACCA' .
'CCCCATGCATATAAGCAAGTACATGACCTCTATAGCAGTACATAATACATATAATTATTGACTGTACATAGTACATTATGTCAAATTCATTCTTGATAGTATATCTATTATATGTTCCTTACCATTAGATCACGAGCTTAATTACCATGCCGCGTGAAACCAGCAACCCGCTAGGCAGGGATCCCTCTTCTCGCTCCGGGTCCC-TAAACCGTGGGGGTCGCTATCCAATGAATTTTACCA' }
]
